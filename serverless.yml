service: serverless-toll
plugins:
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-offline-scheduler

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev
    migration:
      dir: offline/migrations

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-west-2
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    TOLL_URI: https://www.wsdot.wa.gov
    TOLL_99: tolling/sr-99-tunnel-toll-rates
    TOLL_520: Tolling/520/520tollrates.htm

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

# app: seattle-toll
# org: ronbarrantes


package:
  exclude:
    - index.js
    - temp/**

functions:
  getTolls:
    handler: src/functions/handler.getTolls
    events:
      - http:
          path: /api/v1/tolls/getTolls
          method: get

  # create:
  #   handler: src/functions/handler.create
  #   events:
  #     - http:
  #         path: /api/v1/tolls
  #         method: post  

  list:
    handler: src/functions/handler.list
    events:
      - http:
          path: /api/v1/tolls
          method: get  

  # delete:

  populateDb:
    handler: src/functions/handler.populateDb
    events:
      - http: 
          path: /api/v1/tolls/populate-db
          method: get

  # updateDb:
  #   handler: src/functions/handler.updateDb
  #   events:
  #   - schedule: cron(0 8 1 * *)
  #   - schedule: 
  #       rate: cron(* * * * *)
  #   - http:
  #       path: /api/v1/tolls/update-db
  #       method: get

resources:
  Resources:
    TollTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${opt:stage, self:provider.stage} # -${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        

        #BillingMode: PAY_PER_REQUEST
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

        # TimeToLiveDescription:
        #   AttributeName: ttl
        #   Enabled: ENABLED

#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"


# resources:
#   Resources:
#     TollsDynamoTable:
#       Type: 'AWS::DynamoDB::Table'
#       Properties:
#         AttributeDefinitions:
#           - AttributeName: id
#             AttributeType: S
#         KeySchema:
#           - AttributeName: id
#             KeyType: HASH
#         BillingMode: PAY_PER_REQUEST
#         TableName: ${self:provider.environment.DYNAMODB_TABLE}
